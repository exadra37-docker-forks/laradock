version: '2'

networks:
    laradock:
        driver: "bridge"

services:

### Applications Code Container #############################

    applications:
        image: ${APPLICATIONS_IMAGE_NAME}
        container_name: ${APPLICATIONS_CONTAINER_NAME}
        volumes:
            - ${APPLICATIONS_HOST_DIR}:/var/www
        networks:
            - ${APPLICATIONS_NETWORK_NAME}

### Workspace Utilities Container ###########################

    workspace:
        build:
            context: ${WORKSPACE_BUILD_PATH}
            args:
                - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
                - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
                - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
                - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
                - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
                - INSTALL_AEROSPIKE_EXTENSION=${WORKSPACE_INSTALL_AEROSPIKE_EXTENSION}
                - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
                - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
                - PUID=${WORKSPACE_PUID}
                - PGID=${WORKSPACE_PGID}
                - NODE_VERSION=${WORKSPACE_NODE_VERSION}
                - TZ=${WORKSPACE_TIMEZONE}
        container_name: ${WORKSPACE_CONTAINER_NAME}
        volumes_from:
            - applications
        extra_hosts:
            # IMPORTANT: Replace with your Docker Host IP (will be appended to /etc/hosts)
            - "dockerhost:${DOCKER_HOST_IP}"
        ports:
           - "${WORKSPACE_SSH_PORT}:22"
        tty: true
        networks:
            - ${WORKSPACE_NETWORK_NAME}

### PHP-FPM Container #######################################

    php-fpm:
        build:
            context: ${PHP_FPM_BUILD_PATH}
            args:
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
                - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_AEROSPIKE_EXTENSION=${PHP_FPM_INSTALL_AEROSPIKE_EXTENSION}
                - CODEIGNITER=${PHP_FPM_CODEIGNITER}
            dockerfile: ./versions/${PHP_VERSION}/Dockerfile
        container_name: ${PHP_FPM_CONTAINER_NAME}
        volumes_from:
            - applications
        expose:
            - "9000"
        links:
            - workspace
        extra_hosts:
            # IMPORTANT: Replace with your Docker Host IP (will be appended to /etc/hosts)
            - "dockerhost:${DOCKER_HOST_IP}"
        environment:
            # IMPORTANT: Set the Remote Interpreter entry matching name to `laravel`
            - PHP_IDE_CONFIG=${PHP_FPM_IDE_CONFIG}
        networks:
            - ${PHP_FPM_NETWORK_NAME}

### Nginx Server Container ##################################

    nginx:
        build:
            context: ${NGINX_BUILD_PATH}
            args:
                - PHP_UPSTREAM=${PHP_INTERPRETER}
        container_name: ${NGINX_CONTAINER_NAME}
        volumes_from:
            - applications
        volumes:
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${NGINX_NETWORK_NAME}

### Apache Server Containe10.0.75.1r #################################

    apache2:
        build:
            context: ${APACHE2_BUILD_PATH}
            args:
                - PHP_SOCKET=${APACHE2_PHP_SOCKET}
        container_name: ${APACHE2_CONTAINER_NAME}
        volumes_from:
            - applications
        volumes:
            - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
        ports:
            - "${APACHE_HOST_HTTP_PORT}:80"
            - "${APACHE_HOST_HTTPS_PORT}:443"
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${APACHE2_NETWORK_NAME}

### HHVM Container ##########################################
    hhvm:
        build: ${HHVM_BUILD_PATH}
        container_name: ${HHVM_CONTAINER_NAME}
        volumes_from:
            - applications
        # ports:
        #     - "${HHVM_HOST_PORT}:9000"
        expose:
            - "9000"
        links:
            - workspace
        networks:
            - ${HHVM_NETWORK_NAME}

### MySQL Container #########################################

    mysql:
        build:
            context: ${MYSQL_BUILD_PATH}
            args:
                - MYSQL_DATABASE=${DB_DATABASE}
                - MYSQL_USER=${DB_USERNAME}
                - MYSQL_PASSWORD=${DB_PASSWORD}
                - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        container_name: ${MYSQL_CONTAINER_NAME}
        volumes:
            - mysql:/var/lib/mysql
        ports:
            - "${MYSQL_HOST_PORT}:3306"
        networks:
            - ${MYSQL_NETWORK_NAME}

### MariaDB Container #######################################


    mariadb:
        build: ${MARIADB_BUILD_PATH}
        container_name: ${MARIADB_CONTAINER_NAME}
        volumes:
            - mariadb:/var/lib/mysql
        ports:
            - "${MARIADB_HOST_PORT}:3306"
        environment:
            MYSQL_DATABASE: ${MARIADB_DATABASE}
            MYSQL_USER: ${MARIADB_USERNAME}
            MYSQL_PASSWORD: ${MARIADB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
        networks:
            - ${MARIADB_NETWORK_NAME}

### PostgreSQL Container ####################################

    postgres:
        build: ${POSTGRES_BUILD_PATH}
        container_name: ${POSTGRES_CONTAINER_NAME}
        volumes:
            - postgres:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_HOST_PORT}:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_DATABASE}
            POSTGRES_USER: ${POSTGRES_USERNAME}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        networks:
            - ${POSTGRES_NETWORK_NAME}

### PostgreSQL PostGis Container ############################

    postgres-postgis:
        build: ${POSTGRES_POSTGIS_BUILD_PATH}
        container_name: ${POSTGRES_POSTGIS_CONTAINER_NAME}
        volumes:
            - postgres:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_POSTGIS_HOST_PORT}:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_POSTGIS_DATABASE}
            POSTGRES_USER: ${POSTGRES_POSTGIS_USERNAME}
            POSTGRES_PASSWORD: ${POSTGRES_POSTGIS_PASSWORD}
        networks:
            - ${POSTGRES_POSTGIS_NETWORK_NAME}

### Neo4j Container #########################################

    neo4j:
        build: ${NEO4J_BUILD_PATH}
        container_name: ${NEO4J_CONTAINER_NAME}
        ports:
            - "${NEO4J_HOST_PORT}:7474"
            - "${NEO4J_HOST_PORT1}:1337"
        environment:
            - NEO4J_AUTH=${NEO4J_AUTH}
        volumes:
            - neo4j:/var/lib/neo4j/data
        networks:
            - ${NEO4J_NETWORK_NAME}

### MongoDB Container #######################################

    mongo:
        build: ${MONGO_BUILD_PATH}
        container_name: ${MONGO_CONTAINER_NAME}
        ports:
            - "${MONGO_HOST_PORT}:27017"
        volumes:
            - mongo:/data/db
        networks:
            - ${MONGO_NETWORK_NAME}

### Redis Container #########################################

    redis:
        build: ${REDIS_BUILD_PATH}
        container_name: ${REDIS_CONTAINER_NAME}
        volumes:
            - redis:/data
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - ${REDIS_NETWORK_NAME}

### Aerospike c Container ###################################

    aerospike:
        build: ${AEROSPIKE_BUILD_PATH}
        container_name: ${AEROSPIKE_CONTAINER_NAME}
        volumes_from:
            - workspace
        volumes:
            - aerospike:/opt/aerospike/data
        ports:
            - "${AEROSPIKE_SERVICE_HOST_PORT}:3000"
            - "${AEROSPIKE_HEARTBEAT_HOST_PORT}:3001"
            - "${AEROSPIKE_FABRIC_HOST_PORT}:3002"
            - "${AEROSPIKE_INFO_HOST_PORT}:3003"
        networks:
            - ${AEROSPIKE_NETWORK_NAME}


### Memcached Container #####################################

    memcached:
        build: ${MEMCACHED_BUILD_PATH}
        container_name: ${MEMCACHED_CONTAINER_NAME}
        volumes:
            - memcached:/var/lib/memcached
        ports:
            - "${MEMCACHED_HOST_PORT}:11211"
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${MEMCACHED_NETWORK_NAME}

### Beanstalkd Container ####################################

    beanstalkd:
        build: ${BEANSTALKD_BUILD_PATH}
        container_name: ${BEANSTALKD_CONTAINER_NAME}
        ports:
            - "${BEANSTALKD_HOST_PORT}:11300"
        privileged: true
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${BEANSTALKD_NETWORK_NAME}

### Beanstalkd Console Container ############################

    beanstalkd-console:
        build: ${BEANSTALKD_CONSOLE_BUILD_PATH}
        container_name: ${BEANSTALKD_CONSOLE_CONTAINER_NAME}
        ports:
            - "${BEANSTALKD_CONSOLE_HOST_PORT}:2080"
        links:
            - beanstalkd
        networks:
            - ${BEANSTALKD_CONSOLE_NETWORK_NAME}


### RabbitMQ Container ######################################

    rabbitmq:
        build: ${RABBITMQ_BUILD_PATH}
        container_name: ${RABBITMQ_CONTAINER_NAME}
        ports:
            - "${RABBITMQ_NODE_HOST_PORT}:5672"
            - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
            - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        privileged: true
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${RABBITMQ_NETWORK_NAME}


### Caddy Server Container ##################################

    caddy:
        build: ${CADDY_BUILD_PATH}
        container_name: ${CADDY_CONTAINER_NAME}
        volumes_from:
            - applications
        volumes:
            - caddy:/root/.caddy
        ports:
            - "${CADDY_HTTP_HOST_PORT}:80"
            - "${CADDY_HTTPS_HOST_PORT}:443"
            - "${CADDY_DEFAULT_HOST_PORT}:2015"
        volumes:
            - ${CADDY_FILE_HOST_PATH}:/etc/Caddyfile
            - ${CADDY_LOGS_HOST_PATH}:/var/log/caddy
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${CADDY_NETWORK_NAME}

### phpMyAdmin Container ####################################

    phpmyadmin:
        build: ${PHPMYADMIN_BUILD_PATH}
        container_name: ${PHPMYADMIN_CONTAINER_NAME}
        environment:
            PMA_ARBITRARY: ${PHPMYADMIN_PMA_ARBITARY}
            MYSQL_USER: ${PHPMYADMIN_USER}
            MYSQL_PASSWORD: ${PHPMYADMIN_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${PHPMYADMIN_ROOT_PASSWORD}
        ports:
            - "${PHPMYADMIN_HOST_PORT}:80"
        links:
            # for database container
            - "${PHPMYADMIN_LINK_DATABASE}"
        networks:
            - ${PHPMYADMIN_NETWORK_NAME}

### pgAdmin Container #######################################

    pgadmin:
        build: ${PGADMIN_BUILD_PATH}
        container_name: ${PGADMIN_CONTAINER_NAME}
        ports:
            - "${PGADMIN_HOST_PORT}:5050"
        links:
            - postgres
        networks:
            - ${PGADMIN_NETWORK_NAME}

### ElasticSearch Container #################################

    elasticsearch:
        build: ${ELASTICSEARCH_BUILD_PATH}
        container_name: ${ELASTICSEARCH_CONTAINER_NAME}
        volumes:
            - elasticsearch-data:/usr/share/elasticsearch/data
            - elasticsearch-pkugins:/usr/share/elasticsearch/data
        ports:
            - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
            - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
        links:
            - ${PHP_INTERPRETER}
        networks:
            - ${ELASTICSEARCH_NETWORK_NAME}

### Volumes Setup #############passwd##############################

volumes:
    mysql:
        driver: "local"
    postgres:
        driver: "local"
    memcached:
        driver: "local"
    redis:
        driver: "local"
    neo4j:
        driver: "local"
    mariadb:
        driver: "local"
    mongo:
        driver: "local"
    phpmyadmin:
        driver: "local"
    aerospike:
        driver: "local"
    caddy:
        driver: "local"
    elasticsearch-data:
        driver: "local"
    elasticsearch-pkugins:
        driver: "local"
    sessions:    ## nothing is connected to this (- ./data/sessions:/sessions)
        driver: "local"
